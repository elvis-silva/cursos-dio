 Introdução ao TypeScript: Explorando Classes, Tipos e Interfaces

 Douglas Moura

 $ npm install parcel-bundler
 
 tsconfig.json
 
 $ tsc --init
 
 --- interface -------------
 
 interface IAnimal {
 	nome: string;
 	tipo: 'terrestre' | 'aquático';
 	executarRugido(decibeis: number)
 }
 
 interface IFelino extends IAnimal {
 	visaoNoturna: boolean;
 }
 
 interface ICanino extends IAnimal {
 	porte: 'pequeno' | 'médio' | 'grande'
 }
 
 type IDomestico = IFelino | ICanino;     // ou IFelino & ICanino;
 
 const animal: IAnimal = {
 	nome: 'Elefante',
 	tipo: 'terrestre',
 	executarRugido: (decibeis) => (`${decibeis}db`)
 }
 
 const felino: IFelino = {
 	nome: 'Leão',
 	tipo: 'terrestre',
 	executarRugido: (decibeis) => (`${decibeis}db`),
 	visaoNoturna: true
 }
 
 const cachorro: IDomestico = {
 	domestico: true,
 	nome: 'cachorro',
 	porte: 'médio',
 	tipo: 'terrestre'
 }
 
 ---- tratando a tag input ------
 
 const input = document.getElementById('input') as HTMLInputElement;
 
 input.addEventListener('input', (event) => {
 	const i = event.currentTarget as HTMLInputElement;
 	console.log(i.value);
 });
 
 ---- Generic type ----------------
 
 function addToList<T>(array: T[], value: T) {
 	return array.map(() => value);
 }
 
 addToList([1, 2, 3], 4);
 
 ---- condicionais ---------------
 
 interface IUsuario {
 	id: string,
 	email: string
 }
 
 interface IAdmin extends IUsuario {
 	cargo: 'gerente' | 'coordenador' | 'supervisor'
 }
 
 
 function redirect(usuario: IUsuario | IAdmin) {
 	if('cargo' in usuario) {
		// Área admin
		return; 	
 	}
 	
 	// Área usuário
 }
 
 ---- Utilizando o caracter "?" para variáveis opcionais ---
 
 interface IUsuario {
 	id: string,
 	email: string,
 	cargo?: 'gerente' | 'coordenador' | 'supervisor' | 'funcionario'
 }
 
 function redirect(usuario: IUsuario) {
 	if(usuario.cargo) {
 		// redirectUser(usuario.cargo)
 		return;		
  	}
  	
  	// redirect usuário normal;
 }
 
 ---- Criando variáveis com propriedade readonly e private ------
 
 interface IDog {
	nome: string;
	idade: number;
	fav?: string; 
 }
 
 type IDodReadonly = {
 	+readonly [K in keyof IDog]-?: IDog[K];
 }
 
 class Dog implements IDogReadonly {
 	nome;
 	idade;
 	fav;
 	
 	constructor(nome, idade) {
 		this.nome = nome;
 		this.idade = idade;
 	}
 }
 
 const dog = new Dog('Luke', 8);
 
 ---- Como importar bibliotecas com typescript ----------------
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
