Introdução ao design patterns com .NET

 ---- Design Patterns ----------
 
 . São soluções elegantes, testadas e aprovadas para problemas recorrentes que temos no design e implementação de software
 . Surgiram da experimentação e repetição...
 . Não é um padrão pronto para ser aplicado no seu código, é uma descrição/template de como resolver o seu problema nas mais diferentes situações
 
 ---- Hands On -------------------
 
 . Singleton 
 
 	Garante uma única instância da classe e um acesso global para ela, ou seja, centraliza e compartilha recursos.
 	
 . Repository
 
 	Faz a abstração (meio de campo) entre o seu domínio e sua camada de dados, ou seja, contribui para o isolamento da camada de acesso a dados.
 	
 . Facade
 
 	Define uma interface que abstrai a complexidade de interface de subsistemas, ou seja, simplifica a utilização de subsistemas complexos.
 	
 ---- Singleton -------------------------------------
 
 namespace Localiza.Frotas.Infra.Singleton 
 {
 	public sealed class Singleton
 	{
 		private static Singleton instance = null;
 		
 		private Singleton() {}
 		
 		public static Singleton Instance
 		{
 			get
 			{
 				if(instance == null)
 				{
 					instance = new Singleton();
 				}
 				return instance;
 			}
 		}
 	}
 }
 
 ---- Entity Framework ------------------------------------
 
 É um ORM que facilida a forma de obter os registros, simplificando as operações de querys
 
 a classe precisa herdar o DBContext
 
 ---- Facade ----------------------------------------------
 
 IOpitionsMonitor
 
 IHttpClientFactory
 
 Adapter, factory, observer, strategy, builder, state, singleton
 
 

 
 
